import re
import struct
from datetime import datetime

def extract_ascii_strings(hex_str, min_len=4):
    data = bytes.fromhex(hex_str)
    strings = re.findall(rb'[\x20-\x7E]{%d,}' % min_len, data)
    results = []
    for match in re.finditer(rb'[\x20-\x7E]{%d,}' % min_len, data):
        offset = match.start()
        value = match.group().decode('ascii', errors='replace')
        results.append((offset, value))
    return results

def extract_possible_timestamps(hex_str):
    data = bytes.fromhex(hex_str)
    timestamps = []

    for i in range(len(data) - 8):
        chunk = data[i:i+8]
        val = struct.unpack("<Q", chunk)[0]
        # Plausible nanosecond UNIX timestamp range: 2000â€“2100
        if 946684800_000_000_000 < val < 4102444800_000_000_000:
            try:
                dt = datetime.utcfromtimestamp(val / 1e9)
                timestamps.append((i, dt.isoformat()))
            except Exception:
                continue
    return timestamps

def decode_hex_blob(hex_data):
    print("\nðŸ“¦ Extracted ASCII Strings:")
    ascii_strings = extract_ascii_strings(hex_data)
    for offset, string in ascii_strings:
        print(f"  [0x{offset:04X}]  {string}")

    print("\nðŸ•’ Detected Timestamps:")
    timestamps = extract_possible_timestamps(hex_data)
    for offset, ts in timestamps:
        print(f"  [0x{offset:04X}]  {ts}")

# Paste your hex blob here (no quotes or newlines in the middle)
hex_data = """
0000037f057f03000006000000059100000002000000020c000000416374696f6e00057c000000040000000517000000020000000208000000496400020600000000051f00000002000000020a0000005061746800020c000000416374696f6e00052100000002000000020b0000005374616d7000010d000000ac7ea663cd45e640051c00000002000000020a0000005479706500000900000001000000059500000002000000020e000000416374696f6e494400057e000000040000000517000000020000000208000000496400020600000000052100000002000000020a0000005061746800020e000000416374696f6e494400052100000002000000020b0000005374616d7000010d000000ac7ea663cd45e640051c00000002000000020a0000005479706500000900000001000000058d00000002000000020a0000004e616d6500057a000000040000000517000000020000000208000000496400020600000000051d00000002000000020a0000005061746800020a0000004e616d6500052100000002000000020b0000005374616d7000010d000000ac7ea663cd45e640051c00000002000000020a0000005479706500000900000001000000059300000002000000020d0000005265764755494400057d000000040000000517000000020000000208000000496400020600000000052000000002000000020a0000005061746800020d0000005265764755494400052100000002000000020b0000005374616d7000010d000000ac7ea663cd45e640051c00000002000000020a0000005479706500000900000001000000059900000002000000021000000052657669657754696d65000580000000040000000517000000020000000208000000496400020600000000052300000002000000020a0000005061746800021000000052657669657754696d6500052100000002000000020b0000005374616d7000010d000000ac7ea663cd45e640051c00000002000000020a0000005479706500000900000001000000059700000002000000020f00000053747564794755494400057f000000040000000517000000020000000208000000496400020600000000052200000002000000020a0000005061746800020f00000053747564794755494400052100000002000000020b0000005374616d7000010d000000a9d6aeb1ec46e640051c00000002000000020a0000005479706500000900000001000000
"""

decode_hex_blob(hex_data.strip().replace("\n", ""))
