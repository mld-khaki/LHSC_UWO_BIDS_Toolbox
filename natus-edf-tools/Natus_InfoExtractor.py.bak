## Natus metadata extraction tool
# Author: Dr. Milad Khaki
# Date: 2025-02-21
# Description: Extracts metadata from Natus EEG files, including nested key-value structures.
# Usage: python Natus_InfoExtractor.py <input_dir> [-o output.xlsx]
# License: MIT License

import re
import pandas as pd
from pathlib import Path
from datetime import datetime, timedelta

EXCEL_EPOCH = datetime(1899, 12, 30)  # Base date for Excel/Natus timestamps

def convert_excel_date(excel_time):
    """Convert Excel-style floating point date to YYYY-MM-DD HH:MM:SS format safely."""
    try:
        excel_time = float(excel_time)  # Ensure it's a float
        
        # Ensure the timestamp is within a reasonable range (Natus timestamps should be within 1800-2100)
        if excel_time < 0 or excel_time > 80000:  # Approx 2199-12-31 in Excel format
            return str(excel_time)  # Return as string if out of range

        converted_time = EXCEL_EPOCH + timedelta(days=excel_time)
        return converted_time.strftime("%Y-%m-%d %H:%M:%S")
    
    except (ValueError, TypeError, OverflowError):
        return str(excel_time)  # Return as string if conversion fails

def parse_metadata(content, parent_key=""):
    """Extracts key-value pairs recursively from structured data."""
    metadata = {}
    
    # Match keys dynamically, allowing for nested structures
    pattern = r'\(\."([^"]+)"\s*,\s*(.*?)\)'

    for match in re.finditer(pattern, content):
        key, value = match.groups()
        full_key = f"{parent_key}_{key}" if parent_key else key  # Handle nested keys

        # Skip excessively large values (>1024 characters)
        if len(value) > 1024:
            continue

        # Check if value contains another key-value structure (nested data)
        if re.search(r'\(\."([^"]+)"\s*,', value):
            sub_metadata = parse_metadata(value, full_key)
            metadata.update(sub_metadata)
        else:
        # Convert timestamps stored as floats
            if "timespan" in full_key.lower():    
                pass
            else:
                if "Time" in full_key or "Date" in full_key or "Timestamp" in full_key:
                    value = convert_excel_date(value)

        metadata[full_key] = value.strip()

    return metadata

def extract_eeg_metadata(directory):
    """Extract metadata from all .eeg files in directory."""
    all_metadata = []

    for eeg_file in Path(directory).rglob('*.eeg'):
        try:
            # Read file content
            with open(eeg_file, 'rb') as f:
                content = f.read().decode('utf-8', errors='ignore')

            # Parse metadata recursively
            metadata = parse_metadata(content)

            # Extract essential fields
            study_name = metadata.get("StudyName", "Unknown")
            folder_name = eeg_file.parent.name
            duration = metadata.get("RECORDINGTIMESPAN", "Unknown") # Extract Duration
            eeg_no = metadata.get("EegNo", "Unknown") 
            machine = metadata.get("Machine", "Unknown")  

            # Extract all timestamps and dates
            date_keys = []
            for k in metadata:
                kk = k.lower()
                if ("date" in kk) or ("time" in kk) or ("timestamp" in kk):
                    date_keys.append(k)
                    
            print(date_keys)
            date_metadata = {k: str(metadata[k]) for k in date_keys}  # Ensure all dates are strings

            # Order DataFrame: StudyName, FolderName, Duration, EegNo, Machine, then timestamps, then others
            ordered_metadata = {
                "StudyName": study_name,
                "FolderName": folder_name,
                "Duration": duration,
                "EegNo": eeg_no,
                "Machine": machine
            }
            ordered_metadata.update(date_metadata)  # Insert extracted timestamps next
            ordered_metadata.update(metadata)  # Append remaining metadata

            ordered_metadata["source_file"] = str(eeg_file)  # Track source file
            all_metadata.append(ordered_metadata)

        except Exception as e:
            raise(e)
            print(f"Error processing {eeg_file}: {e}")

    return all_metadata

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Extract metadata from Natus EEG files")
    parser.add_argument('-o', '--output', default='eeg_metadata.xlsx', help="Output Excel file")
    parser.add_argument('input_dir', help="Directory containing .eeg files")

    args = parser.parse_args()

    print(f"Processing files in {args.input_dir}")
    metadata_list = extract_eeg_metadata(args.input_dir)

    if metadata_list:
        # Convert to DataFrame
        df = pd.DataFrame(metadata_list)

        # Save to Excel
        print(f"Saving to {args.output}")
        df.to_excel(args.output, index=False)
        print(f"Processed {len(metadata_list)} files")
        print("\nExtracted fields (ordered):")
        print("\n".join(df.columns))
    else:
        print("No data found")
